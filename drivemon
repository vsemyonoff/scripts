#!/usr/bin/env bash
LANG=C
set -e

function echoerr() {
    printf "%b\n" "${*}" 1>&2
}

function usage() {
    [[ ${#} > 0 ]] && echoerr "[${THIS}] error: ${@}\n"
    echoerr "usage: ${THIS} [cloud: default '${CLOUD}']"
    exit ${#}
}

THIS="$(basename $(realpath ${BASH_SOURCE[0]}))"
CLOUD="${CLOUD_DEFAULT:-fastmail}"

# Expect not more than one argument
[[ ${#} > 1 ]] && usage "too many aruments"
CLOUD="${1:-${CLOUD}}"

# Validate parent process
PARENT="$(ps -o comm= ${PPID})"
[[ "${PARENT}" != "systemd" ]] &&
    usage "supposed to be called from systemd service"
unset PARENT

# Obtain cloud home
CLOUD_HOME_VAR="${CLOUD^^}_HOME"
CLOUD_HOME="${!CLOUD_HOME_VAR}"
[[ "${CLOUD_HOME}" ]] || usage "'${CLOUD_HOME_VAR}' not set"
unset CLOUD_HOME_VAR

# Inotify args
TARGET="${CLOUD_HOME}"; unset CLOUD_HOME
EVENTS="attrib,create,delete,modify,move"
PIPE="${XDG_RUNTIME_DIR}/drivesync/${CLOUD}.fifo"
unset CLOUD

# Pipe must be opened by corresponding systemd unit
[[ ! -p "${PIPE}" ]] &&
    usage "'${PIPE}' output pipe not exists"

exec inotifywait --outfile "${PIPE}" \
                 --event "${EVENTS}" \
                 --no-dereference    \
                 --recursive         \
                 --monitor           \
                 "${TARGET}"
