#!/usr/bin/env bash
LANG=C
#set -e

function echoerr() {
    printf "%b\n" "${*}" 1>&2
}

function usage() {
    [[ ${#} > 0 ]] && echoerr "[${THIS}] error: ${@}\n"
    echoerr "usage: ${THIS} [cloud: default '${CLOUD}']"
    exit ${#}
}

THIS="$(basename $(realpath ${BASH_SOURCE[0]}))"
CLOUD="${CLOUD_DEFAULT:-fastmail}"

# Expect not more than one argument
[[ ${#} > 1 ]] && usage "too many arguments"
CLOUD="${1:-${CLOUD}}"

# Obtain cloud backup directory
CLOUD_BACKUP_VAR="${CLOUD^^}_BACKUP"
BACKUP_DIR="${!CLOUD_BACKUP_VAR}"
[[ "${BACKUP_DIR}" ]] || usage "'${CLOUD_BACKUP_VAR}' not set"
unset CLOUD_BACKUP_VAR

# Set backup package
PACK="${BACKUP_DIR}/dotfiles/$(date +%Y%m%d-%H%M%S)-${HOSTNAME}.tar.xz"

# Validate parent process
PARENT="$(ps -o comm= ${PPID})"
case "${PARENT}" in
    run-parts|systemd)
        PARENT="${PARENT^}"
        SEND_REPORT=1
        ;;
    *)
        PARENT="${THIS^}"
        ;;
esac

# Prepare errors log
TMP_DIR="${XDG_RUNTIME_DIR}" # /backup"; mkdir -p "${TMP_DIR}"
ERR_LOG="$(mktemp --tmpdir=${TMP_DIR})"

# Do the job
{ pushd "${HOME}/Sources/dotfiles" >/dev/null
  mkdir -p "$(dirname ${PACK})"

  git ls-files | tar --create --preserve-permissions --xz --file="${PACK}" --directory="${HOME}" --files-from=-

  groups > "${BACKUP_DIR}/dotfiles/groups-${HOSTNAME}.list"
  cp "${PACK}" "${BACKUP_DIR}/dotfiles-${HOSTNAME}.tar.xz"

  popd >/dev/null
} 2> >(tee "${ERR_LOG}")

# Email errors (if any) to 'USER'
if [[ -s "${ERR_LOG}" ]]; then
    if [[ "${SEND_REPORT}" ]]; then
        printf "Subject: [${HOSTNAME}]:Backup $(date)\n\n$(cat ${ERR_LOG})" |
            sendmail -F "[${HOSTNAME}]:${PARENT}" "${USER}" 1>/dev/null 2>&1
    fi
    ERR=1
fi
rm -f "${ERR_LOG}"

exit ${ERR}
